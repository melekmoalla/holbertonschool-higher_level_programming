Using ``add_integer``
-----------------------

Parameter "b" is defaulted to int "98"
the parameters are type int
Returns the sum of the parameters

First import ``add_integer``

    >>> add_integer = __import__('0-add_integer').add_integer

Now use it:

>>> add_integer(1, 2)
3


>>> add_integer(100, -2)
98


>>> add_integer(2)
100


>>> add_integer(100.3, -2)
98

>>> add_integer(-2, 100.3)
98

>>> add_integer(1e308, 1e308)
200000000000000002195812725888091083480984619354623692673621365806315170809822983074326657956989377798122499339442345031223180567486280176656614018396292092062543329005866054371394979399177118086676768932330002356853795252425890355256182391573414916245567940343568830210583605786415746545949771430860446236672

>>> add_integer(4, "School")
Traceback (most recent call last):
...
TypeError: b must be an integer

>>> add_integer(4, "a")
Traceback (most recent call last):
...
TypeError: b must be an integer

>>> add_integer("School", 4)
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer(1, float("NaN"))
Output: NaN Error

>>> add_integer(None)
Traceback (most recent call last):
...
TypeError: a must be an integer
